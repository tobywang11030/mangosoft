<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:context="http://www.springframework.org/schema/context" 
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
						http://www.springframework.org/schema/context    
						http://www.springframework.org/schema/context/spring-context-3.0.xsd    
						http://www.springframework.org/schema/tx    
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd    
						http://www.springframework.org/schema/aop     
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"> 

	<!-- 加载properties文件 -->
	<context:property-placeholder location="classpath*:*.properties" />

	<!-- 数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/ai_alice?useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true" />
		<property name="user" value="dsm" />
		<property name="password" value="dsm123456" />
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="5" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="30" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="10" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="60" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="5" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="0" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="true" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
	</bean>

	<!-- SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<!-- 检测含有hibernate标注的class -->
		<property name="packagesToScan">
			<list>
				<value>com.mangosoft.vo</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="connection.useUnicode">true</prop>
				<!-- 值可以为create/create-drop/update/validate/none -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="connection.useUnicode">true</prop>
				<prop key="connection.characterEncoding">utf-8</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.jdbc.fetch_size">100</prop>
				<prop key="hibernate.jdbc.batch_size">100</prop>
				<prop key="hibernate.use_outer_join">true</prop>
			</props>
		</property>
	</bean>

	<!-- hibernateTemplate -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean name="openSessionInViewInterceptor"  
        class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">   
        <property name="sessionFactory">   
            <ref bean="sessionFactory" />   
        </property>   
        <property name="flushMode" value="1"/>   
        <property name="singleSession" value="false" />   
    </bean>  

	<!-- transaction Notice -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="sava*" propagation="REQUIRED" />
			<tx:method name="refuse*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="mod*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="change*" propagation="REQUIRED" />
			<tx:method name="send*" propagation="REQUIRED" />
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- Spring AOP config -->
	<aop:config>
		<!-- pointcut -->
		<aop:pointcut id="newServicesPointcut" expression="execution(* com.mangosoft.service.*..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="newServicesPointcut" />
		<!-- aop:advisor advice-ref="txAdvice" pointcut-ref="newServicesPointcut2" /-->
	</aop:config>

	<aop:aspectj-autoproxy />

	<context:annotation-config />

	<context:component-scan base-package="com.mangosoft" annotation-config="true" />

	<!-- Quartz Job configuration -->
	<import resource="quartz/quartz-context.xml"/>
	
</beans>